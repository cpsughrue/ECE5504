// See LICENSE.Berkeley for license details.
// See LICENSE.SiFive for license details.
// ~/rocket/chipyard-clean/generators/rocket-chip/src/main/scala/tile/LazyRoCC.scala

package freechips.rocketchip.tile

import chisel3._
import chisel3.util._
import chisel3.util.HasBlackBoxResource
import chisel3.experimental.IntParam
import freechips.rocketchip.config._
import freechips.rocketchip.diplomacy._
import freechips.rocketchip.rocket._
import freechips.rocketchip.tilelink._
import freechips.rocketchip.util.InOrderArbiter

case object BuildRoCC extends Field[Seq[Parameters => LazyRoCC]](Nil)

class RoCCInstruction extends Bundle {
  val funct = Bits(7.W)
  val rs2 = Bits(5.W)
  val rs1 = Bits(5.W)
  val xd = Bool()
  val xs1 = Bool()
  val xs2 = Bool()
  val rd = Bits(5.W)
  val opcode = Bits(7.W)
}

class RoCCCommand(implicit p: Parameters) extends CoreBundle()(p) {
  val inst = new RoCCInstruction
  val rs1 = Bits(xLen.W)
  val rs2 = Bits(xLen.W)
  val status = new MStatus
}

class RoCCResponse(implicit p: Parameters) extends CoreBundle()(p) {
  val rd = Bits(5.W)
  val data = Bits(xLen.W)
}

class RoCCCoreIO(implicit p: Parameters) extends CoreBundle()(p) {
  val cmd = Flipped(Decoupled(new RoCCCommand))
  val resp = Decoupled(new RoCCResponse)
  val mem = new HellaCacheIO
  val busy = Output(Bool())
  val interrupt = Output(Bool())
  val exception = Input(Bool())
}

class RoCCIO(val nPTWPorts: Int)(implicit p: Parameters) extends RoCCCoreIO()(p) {
  val ptw = Vec(nPTWPorts, new TLBPTWIO)
  val fpu_req = Decoupled(new FPInput)
  val fpu_resp = Flipped(Decoupled(new FPResult))
}

/** Base classes for Diplomatic TL2 RoCC units **/
abstract class LazyRoCC(
      val opcodes: OpcodeSet,
      val nPTWPorts: Int = 0,
      val usesFPU: Boolean = false
    )(implicit p: Parameters) extends LazyModule {
  val module: LazyRoCCModuleImp
  val atlNode: TLNode = TLIdentityNode()
  val tlNode: TLNode = TLIdentityNode()
}

class LazyRoCCModuleImp(outer: LazyRoCC) extends LazyModuleImp(outer) {
  val io = IO(new RoCCIO(outer.nPTWPorts))
}

/** Mixins for including RoCC **/

trait HasLazyRoCC extends CanHavePTW { this: BaseTile =>
  val roccs = p(BuildRoCC).map(_(p))

  roccs.map(_.atlNode).foreach { atl => tlMasterXbar.node :=* atl }
  roccs.map(_.tlNode).foreach { tl => tlOtherMastersNode :=* tl }

  nPTWPorts += roccs.map(_.nPTWPorts).sum
  nDCachePorts += roccs.size
}

trait HasLazyRoCCModule extends CanHavePTWModule
    with HasCoreParameters { this: RocketTileModuleImp with HasFpuOpt =>

  val (respArb, cmdRouter) = if(outer.roccs.nonEmpty) {
    val respArb = Module(new RRArbiter(new RoCCResponse()(outer.p), outer.roccs.size))
    val cmdRouter = Module(new RoccCommandRouter(outer.roccs.map(_.opcodes))(outer.p))
    outer.roccs.zipWithIndex.foreach { case (rocc, i) =>
      rocc.module.io.ptw ++=: ptwPorts
      rocc.module.io.cmd <> cmdRouter.io.out(i)
      val dcIF = Module(new SimpleHellaCacheIF()(outer.p))
      dcIF.io.requestor <> rocc.module.io.mem
      dcachePorts += dcIF.io.cache
      respArb.io.in(i) <> Queue(rocc.module.io.resp)
    }

    fpuOpt foreach { fpu =>
      val nFPUPorts = outer.roccs.count(_.usesFPU)
      if (usingFPU && nFPUPorts > 0) {
        val fpArb = Module(new InOrderArbiter(new FPInput()(outer.p), new FPResult()(outer.p), nFPUPorts))
        val fp_rocc_ios = outer.roccs.filter(_.usesFPU).map(_.module.io)
        fpArb.io.in_req <> fp_rocc_ios.map(_.fpu_req)
        fp_rocc_ios.zip(fpArb.io.in_resp).foreach {
          case (rocc, arb) => rocc.fpu_resp <> arb
        }
        fpu.io.cp_req <> fpArb.io.out_req
        fpArb.io.out_resp <> fpu.io.cp_resp
      } else {
        fpu.io.cp_req.valid := false.B
        fpu.io.cp_resp.ready := false.B
      }
    }
    (Some(respArb), Some(cmdRouter))
  } else {
    (None, None)
  }
}

class SinExample(opcodes: OpcodeSet)(implicit p: Parameters) extends LazyRoCC(opcodes) {
  override lazy val module = new SinExampleModuleImp(this)
}

class SinExampleModuleImp(outer: SinExample)(implicit p: Parameters) extends LazyRoCCModuleImp(outer) with HasCoreParameters {

  val cmd = Queue(io.cmd)
  val funct = cmd.bits.inst.funct
  
  val value = cmd.bits.rs2

  // These come from the AccumulatorAccelerator and can be ignored
  val doWrite = funct === 0.U
  val doRead = funct === 1.U
  val doLoad = funct === 2.U
  val doAccum = funct === 3.U

  // val atan_table = Array(
  //   0.78539816,
  //   0.46364761,
  //   0.24497866,
  //   0.12435499,
  //   0.06241881,
  //   0.03123983,
  //   0.01562373,
  //   0.00781234,
  //   0.00390623,
  //   0.00195312,
  //   0.00097656,
  //   0.00048828,
  //   0.00024414,
  //   0.00012207,
  //   0.00006104,
  //   0.00003052,
  //   0.00001526,
  //   0.00000763,
  //   0.00000381,
  //   0.00000191,
  //   0.00000095,
  //   0.00000048,
  //   0.00000024
  // )
  // val cos_init = 0.6072529350088812561694
  // def sin_cordic(angle: UInt) = {
  //   val x = cos_init  // Directly initialize cosine
  //   val y = 0.0       // Initialize sine
  //   val z = angle     // Initialize angle
  //   val factor = 1.0

  //   for (i <- 0 until 23) {
  //       val temp_x = 0.0 
  //       if (z >= 0.U) {
  //           temp_x := x - (y * factor)
  //           y := y + (x * factor)
  //           z := z - atan_table(i)
  //       } else {
  //           temp_x := x + (y * factor)
  //           y := y - (x * factor)
  //           z := z + atan_table(i)
  //       }
  //       x := temp_x
  //       factor := factor / 2 //Divide by 2
  //   }
  //   printf("Function returned %f\n", y)
  //   val sin = (y * (1 << 16)).toLong  // Return sine value
  //   sin
  // }
  
  val table_size = 1024.0
  val M_PI = 3.14159265358979323846264338327950288
  val M_PI_2 = M_PI/2
  val sin_table = Array(
    -1.00000000,
    -0.99999528,
    -0.99998114,
    -0.99995756,
    -0.99992455,
    -0.99988212,
    -0.99983025,
    -0.99976895,
    -0.99969823,
    -0.99961808,
    -0.99952850,
    -0.99942949,
    -0.99932106,
    -0.99920320,
    -0.99907592,
    -0.99893922,
    -0.99879310,
    -0.99863756,
    -0.99847260,
    -0.99829822,
    -0.99811443,
    -0.99792123,
    -0.99771861,
    -0.99750659,
    -0.99728516,
    -0.99705432,
    -0.99681408,
    -0.99656444,
    -0.99630540,
    -0.99603697,
    -0.99575914,
    -0.99547192,
    -0.99517532,
    -0.99486932,
    -0.99455395,
    -0.99422919,
    -0.99389506,
    -0.99355156,
    -0.99319869,
    -0.99283645,
    -0.99246484,
    -0.99208388,
    -0.99169356,
    -0.99129389,
    -0.99088487,
    -0.99046650,
    -0.99003880,
    -0.98960175,
    -0.98915538,
    -0.98869967,
    -0.98823464,
    -0.98776030,
    -0.98727663,
    -0.98678366,
    -0.98628138,
    -0.98576980,
    -0.98524892,
    -0.98471875,
    -0.98417929,
    -0.98363055,
    -0.98307254,
    -0.98250525,
    -0.98192870,
    -0.98134288,
    -0.98074782,
    -0.98014350,
    -0.97952994,
    -0.97890714,
    -0.97827511,
    -0.97763386,
    -0.97698338,
    -0.97632369,
    -0.97565480,
    -0.97497670,
    -0.97428941,
    -0.97359293,
    -0.97288726,
    -0.97217243,
    -0.97144842,
    -0.97071525,
    -0.96997293,
    -0.96922146,
    -0.96846085,
    -0.96769111,
    -0.96691224,
    -0.96612425,
    -0.96532715,
    -0.96452094,
    -0.96370564,
    -0.96288126,
    -0.96204779,
    -0.96120524,
    -0.96035364,
    -0.95949297,
    -0.95862326,
    -0.95774451,
    -0.95685672,
    -0.95595991,
    -0.95505409,
    -0.95413926,
    -0.95321543,
    -0.95228261,
    -0.95134081,
    -0.95039003,
    -0.94943030,
    -0.94846161,
    -0.94748398,
    -0.94649741,
    -0.94550191,
    -0.94449750,
    -0.94348418,
    -0.94246196,
    -0.94143086,
    -0.94039087,
    -0.93934202,
    -0.93828431,
    -0.93721775,
    -0.93614235,
    -0.93505812,
    -0.93396507,
    -0.93286322,
    -0.93175257,
    -0.93063313,
    -0.92950491,
    -0.92836793,
    -0.92722220,
    -0.92606772,
    -0.92490450,
    -0.92373256,
    -0.92255192,
    -0.92136257,
    -0.92016453,
    -0.91895781,
    -0.91774243,
    -0.91651839,
    -0.91528571,
    -0.91404440,
    -0.91279446,
    -0.91153592,
    -0.91026878,
    -0.90899306,
    -0.90770877,
    -0.90641591,
    -0.90511451,
    -0.90380457,
    -0.90248610,
    -0.90115913,
    -0.89982366,
    -0.89847970,
    -0.89712726,
    -0.89576637,
    -0.89439703,
    -0.89301926,
    -0.89163306,
    -0.89023845,
    -0.88883545,
    -0.88742406,
    -0.88600431,
    -0.88457620,
    -0.88313975,
    -0.88169497,
    -0.88024187,
    -0.87878048,
    -0.87731079,
    -0.87583283,
    -0.87434662,
    -0.87285215,
    -0.87134946,
    -0.86983854,
    -0.86831943,
    -0.86679212,
    -0.86525664,
    -0.86371300,
    -0.86216122,
    -0.86060130,
    -0.85903327,
    -0.85745714,
    -0.85587292,
    -0.85428062,
    -0.85268028,
    -0.85107189,
    -0.84945547,
    -0.84783104,
    -0.84619862,
    -0.84455822,
    -0.84290985,
    -0.84125353,
    -0.83958928,
    -0.83791711,
    -0.83623704,
    -0.83454908,
    -0.83285326,
    -0.83114957,
    -0.82943805,
    -0.82771871,
    -0.82599156,
    -0.82425662,
    -0.82251391,
    -0.82076344,
    -0.81900523,
    -0.81723930,
    -0.81546566,
    -0.81368433,
    -0.81189532,
    -0.81009866,
    -0.80829436,
    -0.80648243,
    -0.80466290,
    -0.80283578,
    -0.80100109,
    -0.79915885,
    -0.79730907,
    -0.79545177,
    -0.79358697,
    -0.79171468,
    -0.78983493,
    -0.78794773,
    -0.78605309,
    -0.78415105,
    -0.78224161,
    -0.78032479,
    -0.77840061,
    -0.77646910,
    -0.77453026,
    -0.77258411,
    -0.77063068,
    -0.76866998,
    -0.76670203,
    -0.76472686,
    -0.76274446,
    -0.76075488,
    -0.75875812,
    -0.75675421,
    -0.75474316,
    -0.75272499,
    -0.75069972,
    -0.74866738,
    -0.74662797,
    -0.74458152,
    -0.74252805,
    -0.74046757,
    -0.73840012,
    -0.73632570,
    -0.73424433,
    -0.73215604,
    -0.73006085,
    -0.72795877,
    -0.72584983,
    -0.72373404,
    -0.72161142,
    -0.71948200,
    -0.71734580,
    -0.71520283,
    -0.71305311,
    -0.71089667,
    -0.70873353,
    -0.70656370,
    -0.70438721,
    -0.70220407,
    -0.70001431,
    -0.69781796,
    -0.69561502,
    -0.69340552,
    -0.69118948,
    -0.68896692,
    -0.68673786,
    -0.68450233,
    -0.68226034,
    -0.68001192,
    -0.67775709,
    -0.67549586,
    -0.67322827,
    -0.67095432,
    -0.66867405,
    -0.66638747,
    -0.66409460,
    -0.66179548,
    -0.65949011,
    -0.65717852,
    -0.65486073,
    -0.65253677,
    -0.65020666,
    -0.64787041,
    -0.64552805,
    -0.64317961,
    -0.64082510,
    -0.63846454,
    -0.63609797,
    -0.63372539,
    -0.63134684,
    -0.62896234,
    -0.62657190,
    -0.62417555,
    -0.62177332,
    -0.61936523,
    -0.61695129,
    -0.61453153,
    -0.61210598,
    -0.60967466,
    -0.60723759,
    -0.60479479,
    -0.60234628,
    -0.59989210,
    -0.59743226,
    -0.59496678,
    -0.59249569,
    -0.59001902,
    -0.58753678,
    -0.58504900,
    -0.58255570,
    -0.58005691,
    -0.57755265,
    -0.57504294,
    -0.57252781,
    -0.57000728,
    -0.56748137,
    -0.56495011,
    -0.56241352,
    -0.55987163,
    -0.55732446,
    -0.55477204,
    -0.55221438,
    -0.54965151,
    -0.54708346,
    -0.54451025,
    -0.54193191,
    -0.53934845,
    -0.53675991,
    -0.53416631,
    -0.53156767,
    -0.52896401,
    -0.52635537,
    -0.52374176,
    -0.52112321,
    -0.51849975,
    -0.51587140,
    -0.51323819,
    -0.51060013,
    -0.50795726,
    -0.50530960,
    -0.50265717,
    -0.50000000,
    -0.49733812,
    -0.49467154,
    -0.49200030,
    -0.48932443,
    -0.48664393,
    -0.48395885,
    -0.48126920,
    -0.47857502,
    -0.47587632,
    -0.47317313,
    -0.47046548,
    -0.46775339,
    -0.46503690,
    -0.46231601,
    -0.45959077,
    -0.45686119,
    -0.45412731,
    -0.45138914,
    -0.44864671,
    -0.44590006,
    -0.44314919,
    -0.44039415,
    -0.43763496,
    -0.43487164,
    -0.43210421,
    -0.42933271,
    -0.42655717,
    -0.42377760,
    -0.42099403,
    -0.41820649,
    -0.41541501,
    -0.41261961,
    -0.40982032,
    -0.40701717,
    -0.40421018,
    -0.40139937,
    -0.39858478,
    -0.39576643,
    -0.39294435,
    -0.39011856,
    -0.38728909,
    -0.38445597,
    -0.38161923,
    -0.37877889,
    -0.37593497,
    -0.37308751,
    -0.37023653,
    -0.36738206,
    -0.36452412,
    -0.36166274,
    -0.35879796,
    -0.35592979,
    -0.35305827,
    -0.35018341,
    -0.34730525,
    -0.34442382,
    -0.34153914,
    -0.33865124,
    -0.33576014,
    -0.33286588,
    -0.32996848,
    -0.32706796,
    -0.32416437,
    -0.32125771,
    -0.31834803,
    -0.31543534,
    -0.31251968,
    -0.30960107,
    -0.30667954,
    -0.30375512,
    -0.30082783,
    -0.29789771,
    -0.29496478,
    -0.29202906,
    -0.28909059,
    -0.28614940,
    -0.28320551,
    -0.28025894,
    -0.27730974,
    -0.27435791,
    -0.27140350,
    -0.26844653,
    -0.26548703,
    -0.26252503,
    -0.25956055,
    -0.25659362,
    -0.25362427,
    -0.25065253,
    -0.24767843,
    -0.24470199,
    -0.24172324,
    -0.23874221,
    -0.23575894,
    -0.23277343,
    -0.22978574,
    -0.22679587,
    -0.22380387,
    -0.22080975,
    -0.21781356,
    -0.21481531,
    -0.21181503,
    -0.20881276,
    -0.20580852,
    -0.20280233,
    -0.19979423,
    -0.19678425,
    -0.19377242,
    -0.19075875,
    -0.18774329,
    -0.18472606,
    -0.18170708,
    -0.17868639,
    -0.17566402,
    -0.17263998,
    -0.16961433,
    -0.16658707,
    -0.16355824,
    -0.16052786,
    -0.15749598,
    -0.15446261,
    -0.15142778,
    -0.14839152,
    -0.14535387,
    -0.14231484,
    -0.13927447,
    -0.13623279,
    -0.13318982,
    -0.13014560,
    -0.12710015,
    -0.12405350,
    -0.12100568,
    -0.11795672,
    -0.11490664,
    -0.11185549,
    -0.10880328,
    -0.10575004,
    -0.10269580,
    -0.09964060,
    -0.09658446,
    -0.09352740,
    -0.09046947,
    -0.08741068,
    -0.08435107,
    -0.08129066,
    -0.07822948,
    -0.07516757,
    -0.07210495,
    -0.06904164,
    -0.06597769,
    -0.06291312,
    -0.05984795,
    -0.05678221,
    -0.05371594,
    -0.05064917,
    -0.04758192,
    -0.04451421,
    -0.04144609,
    -0.03837758,
    -0.03530871,
    -0.03223950,
    -0.02916999,
    -0.02610020,
    -0.02303017,
    -0.01995992,
    -0.01688948,
    -0.01381888,
    -0.01074816,
    -0.00767733,
    -0.00460642,
    -0.00153548,
    0.00153548,
    0.00460642,
    0.00767733,
    0.01074816,
    0.01381888,
    0.01688948,
    0.01995992,
    0.02303017,
    0.02610020,
    0.02916999,
    0.03223950,
    0.03530871,
    0.03837758,
    0.04144609,
    0.04451421,
    0.04758192,
    0.05064917,
    0.05371594,
    0.05678221,
    0.05984795,
    0.06291312,
    0.06597769,
    0.06904164,
    0.07210495,
    0.07516757,
    0.07822948,
    0.08129066,
    0.08435107,
    0.08741068,
    0.09046947,
    0.09352740,
    0.09658446,
    0.09964060,
    0.10269580,
    0.10575004,
    0.10880328,
    0.11185549,
    0.11490664,
    0.11795672,
    0.12100568,
    0.12405350,
    0.12710015,
    0.13014560,
    0.13318982,
    0.13623279,
    0.13927447,
    0.14231484,
    0.14535387,
    0.14839152,
    0.15142778,
    0.15446261,
    0.15749598,
    0.16052786,
    0.16355824,
    0.16658707,
    0.16961433,
    0.17263998,
    0.17566402,
    0.17868639,
    0.18170708,
    0.18472606,
    0.18774329,
    0.19075875,
    0.19377242,
    0.19678425,
    0.19979423,
    0.20280233,
    0.20580852,
    0.20881276,
    0.21181503,
    0.21481531,
    0.21781356,
    0.22080975,
    0.22380387,
    0.22679587,
    0.22978574,
    0.23277343,
    0.23575894,
    0.23874221,
    0.24172324,
    0.24470199,
    0.24767843,
    0.25065253,
    0.25362427,
    0.25659362,
    0.25956055,
    0.26252503,
    0.26548703,
    0.26844653,
    0.27140350,
    0.27435791,
    0.27730974,
    0.28025894,
    0.28320551,
    0.28614940,
    0.28909059,
    0.29202906,
    0.29496478,
    0.29789771,
    0.30082783,
    0.30375512,
    0.30667954,
    0.30960107,
    0.31251968,
    0.31543534,
    0.31834803,
    0.32125771,
    0.32416437,
    0.32706796,
    0.32996848,
    0.33286588,
    0.33576014,
    0.33865124,
    0.34153914,
    0.34442382,
    0.34730525,
    0.35018341,
    0.35305827,
    0.35592979,
    0.35879796,
    0.36166274,
    0.36452412,
    0.36738206,
    0.37023653,
    0.37308751,
    0.37593497,
    0.37877889,
    0.38161923,
    0.38445597,
    0.38728909,
    0.39011856,
    0.39294435,
    0.39576643,
    0.39858478,
    0.40139937,
    0.40421018,
    0.40701717,
    0.40982032,
    0.41261961,
    0.41541501,
    0.41820649,
    0.42099403,
    0.42377760,
    0.42655717,
    0.42933271,
    0.43210421,
    0.43487164,
    0.43763496,
    0.44039415,
    0.44314919,
    0.44590006,
    0.44864671,
    0.45138914,
    0.45412731,
    0.45686119,
    0.45959077,
    0.46231601,
    0.46503690,
    0.46775339,
    0.47046548,
    0.47317313,
    0.47587632,
    0.47857502,
    0.48126920,
    0.48395885,
    0.48664393,
    0.48932443,
    0.49200030,
    0.49467154,
    0.49733812,
    0.50000000,
    0.50265717,
    0.50530960,
    0.50795726,
    0.51060013,
    0.51323819,
    0.51587140,
    0.51849975,
    0.52112321,
    0.52374176,
    0.52635537,
    0.52896401,
    0.53156767,
    0.53416631,
    0.53675991,
    0.53934845,
    0.54193191,
    0.54451025,
    0.54708346,
    0.54965151,
    0.55221438,
    0.55477204,
    0.55732446,
    0.55987163,
    0.56241352,
    0.56495011,
    0.56748137,
    0.57000728,
    0.57252781,
    0.57504294,
    0.57755265,
    0.58005691,
    0.58255570,
    0.58504900,
    0.58753678,
    0.59001902,
    0.59249569,
    0.59496678,
    0.59743226,
    0.59989210,
    0.60234628,
    0.60479479,
    0.60723759,
    0.60967466,
    0.61210598,
    0.61453153,
    0.61695129,
    0.61936523,
    0.62177332,
    0.62417555,
    0.62657190,
    0.62896234,
    0.63134684,
    0.63372539,
    0.63609797,
    0.63846454,
    0.64082510,
    0.64317961,
    0.64552805,
    0.64787041,
    0.65020666,
    0.65253677,
    0.65486073,
    0.65717852,
    0.65949011,
    0.66179548,
    0.66409460,
    0.66638747,
    0.66867405,
    0.67095432,
    0.67322827,
    0.67549586,
    0.67775709,
    0.68001192,
    0.68226034,
    0.68450233,
    0.68673786,
    0.68896692,
    0.69118948,
    0.69340552,
    0.69561502,
    0.69781796,
    0.70001431,
    0.70220407,
    0.70438721,
    0.70656370,
    0.70873353,
    0.71089667,
    0.71305311,
    0.71520283,
    0.71734580,
    0.71948200,
    0.72161142,
    0.72373404,
    0.72584983,
    0.72795877,
    0.73006085,
    0.73215604,
    0.73424433,
    0.73632570,
    0.73840012,
    0.74046757,
    0.74252805,
    0.74458152,
    0.74662797,
    0.74866738,
    0.75069972,
    0.75272499,
    0.75474316,
    0.75675421,
    0.75875812,
    0.76075488,
    0.76274446,
    0.76472686,
    0.76670203,
    0.76866998,
    0.77063068,
    0.77258411,
    0.77453026,
    0.77646910,
    0.77840061,
    0.78032479,
    0.78224161,
    0.78415105,
    0.78605309,
    0.78794773,
    0.78983493,
    0.79171468,
    0.79358697,
    0.79545177,
    0.79730907,
    0.79915885,
    0.80100109,
    0.80283578,
    0.80466290,
    0.80648243,
    0.80829436,
    0.81009866,
    0.81189532,
    0.81368433,
    0.81546566,
    0.81723930,
    0.81900523,
    0.82076344,
    0.82251391,
    0.82425662,
    0.82599156,
    0.82771871,
    0.82943805,
    0.83114957,
    0.83285326,
    0.83454908,
    0.83623704,
    0.83791711,
    0.83958928,
    0.84125353,
    0.84290985,
    0.84455822,
    0.84619862,
    0.84783104,
    0.84945547,
    0.85107189,
    0.85268028,
    0.85428062,
    0.85587292,
    0.85745714,
    0.85903327,
    0.86060130,
    0.86216122,
    0.86371300,
    0.86525664,
    0.86679212,
    0.86831943,
    0.86983854,
    0.87134946,
    0.87285215,
    0.87434662,
    0.87583283,
    0.87731079,
    0.87878048,
    0.88024187,
    0.88169497,
    0.88313975,
    0.88457620,
    0.88600431,
    0.88742406,
    0.88883545,
    0.89023845,
    0.89163306,
    0.89301926,
    0.89439703,
    0.89576637,
    0.89712726,
    0.89847970,
    0.89982366,
    0.90115913,
    0.90248610,
    0.90380457,
    0.90511451,
    0.90641591,
    0.90770877,
    0.90899306,
    0.91026878,
    0.91153592,
    0.91279446,
    0.91404440,
    0.91528571,
    0.91651839,
    0.91774243,
    0.91895781,
    0.92016453,
    0.92136257,
    0.92255192,
    0.92373256,
    0.92490450,
    0.92606772,
    0.92722220,
    0.92836793,
    0.92950491,
    0.93063313,
    0.93175257,
    0.93286322,
    0.93396507,
    0.93505812,
    0.93614235,
    0.93721775,
    0.93828431,
    0.93934202,
    0.94039087,
    0.94143086,
    0.94246196,
    0.94348418,
    0.94449750,
    0.94550191,
    0.94649741,
    0.94748398,
    0.94846161,
    0.94943030,
    0.95039003,
    0.95134081,
    0.95228261,
    0.95321543,
    0.95413926,
    0.95505409,
    0.95595991,
    0.95685672,
    0.95774451,
    0.95862326,
    0.95949297,
    0.96035364,
    0.96120524,
    0.96204779,
    0.96288126,
    0.96370564,
    0.96452094,
    0.96532715,
    0.96612425,
    0.96691224,
    0.96769111,
    0.96846085,
    0.96922146,
    0.96997293,
    0.97071525,
    0.97144842,
    0.97217243,
    0.97288726,
    0.97359293,
    0.97428941,
    0.97497670,
    0.97565480,
    0.97632369,
    0.97698338,
    0.97763386,
    0.97827511,
    0.97890714,
    0.97952994,
    0.98014350,
    0.98074782,
    0.98134288,
    0.98192870,
    0.98250525,
    0.98307254,
    0.98363055,
    0.98417929,
    0.98471875,
    0.98524892,
    0.98576980,
    0.98628138,
    0.98678366,
    0.98727663,
    0.98776030,
    0.98823464,
    0.98869967,
    0.98915538,
    0.98960175,
    0.99003880,
    0.99046650,
    0.99088487,
    0.99129389,
    0.99169356,
    0.99208388,
    0.99246484,
    0.99283645,
    0.99319869,
    0.99355156,
    0.99389506,
    0.99422919,
    0.99455395,
    0.99486932,
    0.99517532,
    0.99547192,
    0.99575914,
    0.99603697,
    0.99630540,
    0.99656444,
    0.99681408,
    0.99705432,
    0.99728516,
    0.99750659,
    0.99771861,
    0.99792123,
    0.99811443,
    0.99829822,
    0.99847260,
    0.99863756,
    0.99879310,
    0.99893922,
    0.99907592,
    0.99920320,
    0.99932106,
    0.99942949,
    0.99952850,
    0.99961808,
    0.99969823,
    0.99976895,
    0.99983025,
    0.99988212,
    0.99992455,
    0.99995756,
    0.99998114,
    0.99999528,
    1.00000000
  )

  val x_table = Array(
    -1.57079633,
    -1.56772537,
    -1.56465441,
    -1.56158345,
    -1.55851248,
    -1.55544152,
    -1.55237056,
    -1.54929960,
    -1.54622864,
    -1.54315768,
    -1.54008672,
    -1.53701576,
    -1.53394480,
    -1.53087384,
    -1.52780288,
    -1.52473192,
    -1.52166096,
    -1.51859000,
    -1.51551904,
    -1.51244808,
    -1.50937712,
    -1.50630616,
    -1.50323519,
    -1.50016423,
    -1.49709327,
    -1.49402231,
    -1.49095135,
    -1.48788039,
    -1.48480943,
    -1.48173847,
    -1.47866751,
    -1.47559655,
    -1.47252559,
    -1.46945463,
    -1.46638367,
    -1.46331271,
    -1.46024175,
    -1.45717079,
    -1.45409983,
    -1.45102886,
    -1.44795790,
    -1.44488694,
    -1.44181598,
    -1.43874502,
    -1.43567406,
    -1.43260310,
    -1.42953214,
    -1.42646118,
    -1.42339022,
    -1.42031926,
    -1.41724830,
    -1.41417734,
    -1.41110638,
    -1.40803542,
    -1.40496446,
    -1.40189350,
    -1.39882254,
    -1.39575157,
    -1.39268061,
    -1.38960965,
    -1.38653869,
    -1.38346773,
    -1.38039677,
    -1.37732581,
    -1.37425485,
    -1.37118389,
    -1.36811293,
    -1.36504197,
    -1.36197101,
    -1.35890005,
    -1.35582909,
    -1.35275813,
    -1.34968717,
    -1.34661621,
    -1.34354525,
    -1.34047428,
    -1.33740332,
    -1.33433236,
    -1.33126140,
    -1.32819044,
    -1.32511948,
    -1.32204852,
    -1.31897756,
    -1.31590660,
    -1.31283564,
    -1.30976468,
    -1.30669372,
    -1.30362276,
    -1.30055180,
    -1.29748084,
    -1.29440988,
    -1.29133892,
    -1.28826796,
    -1.28519699,
    -1.28212603,
    -1.27905507,
    -1.27598411,
    -1.27291315,
    -1.26984219,
    -1.26677123,
    -1.26370027,
    -1.26062931,
    -1.25755835,
    -1.25448739,
    -1.25141643,
    -1.24834547,
    -1.24527451,
    -1.24220355,
    -1.23913259,
    -1.23606163,
    -1.23299067,
    -1.22991970,
    -1.22684874,
    -1.22377778,
    -1.22070682,
    -1.21763586,
    -1.21456490,
    -1.21149394,
    -1.20842298,
    -1.20535202,
    -1.20228106,
    -1.19921010,
    -1.19613914,
    -1.19306818,
    -1.18999722,
    -1.18692626,
    -1.18385530,
    -1.18078434,
    -1.17771338,
    -1.17464241,
    -1.17157145,
    -1.16850049,
    -1.16542953,
    -1.16235857,
    -1.15928761,
    -1.15621665,
    -1.15314569,
    -1.15007473,
    -1.14700377,
    -1.14393281,
    -1.14086185,
    -1.13779089,
    -1.13471993,
    -1.13164897,
    -1.12857801,
    -1.12550705,
    -1.12243608,
    -1.11936512,
    -1.11629416,
    -1.11322320,
    -1.11015224,
    -1.10708128,
    -1.10401032,
    -1.10093936,
    -1.09786840,
    -1.09479744,
    -1.09172648,
    -1.08865552,
    -1.08558456,
    -1.08251360,
    -1.07944264,
    -1.07637168,
    -1.07330072,
    -1.07022976,
    -1.06715879,
    -1.06408783,
    -1.06101687,
    -1.05794591,
    -1.05487495,
    -1.05180399,
    -1.04873303,
    -1.04566207,
    -1.04259111,
    -1.03952015,
    -1.03644919,
    -1.03337823,
    -1.03030727,
    -1.02723631,
    -1.02416535,
    -1.02109439,
    -1.01802343,
    -1.01495247,
    -1.01188150,
    -1.00881054,
    -1.00573958,
    -1.00266862,
    -0.99959766,
    -0.99652670,
    -0.99345574,
    -0.99038478,
    -0.98731382,
    -0.98424286,
    -0.98117190,
    -0.97810094,
    -0.97502998,
    -0.97195902,
    -0.96888806,
    -0.96581710,
    -0.96274614,
    -0.95967518,
    -0.95660421,
    -0.95353325,
    -0.95046229,
    -0.94739133,
    -0.94432037,
    -0.94124941,
    -0.93817845,
    -0.93510749,
    -0.93203653,
    -0.92896557,
    -0.92589461,
    -0.92282365,
    -0.91975269,
    -0.91668173,
    -0.91361077,
    -0.91053981,
    -0.90746885,
    -0.90439789,
    -0.90132692,
    -0.89825596,
    -0.89518500,
    -0.89211404,
    -0.88904308,
    -0.88597212,
    -0.88290116,
    -0.87983020,
    -0.87675924,
    -0.87368828,
    -0.87061732,
    -0.86754636,
    -0.86447540,
    -0.86140444,
    -0.85833348,
    -0.85526252,
    -0.85219156,
    -0.84912060,
    -0.84604963,
    -0.84297867,
    -0.83990771,
    -0.83683675,
    -0.83376579,
    -0.83069483,
    -0.82762387,
    -0.82455291,
    -0.82148195,
    -0.81841099,
    -0.81534003,
    -0.81226907,
    -0.80919811,
    -0.80612715,
    -0.80305619,
    -0.79998523,
    -0.79691427,
    -0.79384330,
    -0.79077234,
    -0.78770138,
    -0.78463042,
    -0.78155946,
    -0.77848850,
    -0.77541754,
    -0.77234658,
    -0.76927562,
    -0.76620466,
    -0.76313370,
    -0.76006274,
    -0.75699178,
    -0.75392082,
    -0.75084986,
    -0.74777890,
    -0.74470794,
    -0.74163698,
    -0.73856601,
    -0.73549505,
    -0.73242409,
    -0.72935313,
    -0.72628217,
    -0.72321121,
    -0.72014025,
    -0.71706929,
    -0.71399833,
    -0.71092737,
    -0.70785641,
    -0.70478545,
    -0.70171449,
    -0.69864353,
    -0.69557257,
    -0.69250161,
    -0.68943065,
    -0.68635969,
    -0.68328872,
    -0.68021776,
    -0.67714680,
    -0.67407584,
    -0.67100488,
    -0.66793392,
    -0.66486296,
    -0.66179200,
    -0.65872104,
    -0.65565008,
    -0.65257912,
    -0.64950816,
    -0.64643720,
    -0.64336624,
    -0.64029528,
    -0.63722432,
    -0.63415336,
    -0.63108240,
    -0.62801143,
    -0.62494047,
    -0.62186951,
    -0.61879855,
    -0.61572759,
    -0.61265663,
    -0.60958567,
    -0.60651471,
    -0.60344375,
    -0.60037279,
    -0.59730183,
    -0.59423087,
    -0.59115991,
    -0.58808895,
    -0.58501799,
    -0.58194703,
    -0.57887607,
    -0.57580511,
    -0.57273414,
    -0.56966318,
    -0.56659222,
    -0.56352126,
    -0.56045030,
    -0.55737934,
    -0.55430838,
    -0.55123742,
    -0.54816646,
    -0.54509550,
    -0.54202454,
    -0.53895358,
    -0.53588262,
    -0.53281166,
    -0.52974070,
    -0.52666974,
    -0.52359878,
    -0.52052782,
    -0.51745685,
    -0.51438589,
    -0.51131493,
    -0.50824397,
    -0.50517301,
    -0.50210205,
    -0.49903109,
    -0.49596013,
    -0.49288917,
    -0.48981821,
    -0.48674725,
    -0.48367629,
    -0.48060533,
    -0.47753437,
    -0.47446341,
    -0.47139245,
    -0.46832149,
    -0.46525052,
    -0.46217956,
    -0.45910860,
    -0.45603764,
    -0.45296668,
    -0.44989572,
    -0.44682476,
    -0.44375380,
    -0.44068284,
    -0.43761188,
    -0.43454092,
    -0.43146996,
    -0.42839900,
    -0.42532804,
    -0.42225708,
    -0.41918612,
    -0.41611516,
    -0.41304420,
    -0.40997323,
    -0.40690227,
    -0.40383131,
    -0.40076035,
    -0.39768939,
    -0.39461843,
    -0.39154747,
    -0.38847651,
    -0.38540555,
    -0.38233459,
    -0.37926363,
    -0.37619267,
    -0.37312171,
    -0.37005075,
    -0.36697979,
    -0.36390883,
    -0.36083787,
    -0.35776691,
    -0.35469594,
    -0.35162498,
    -0.34855402,
    -0.34548306,
    -0.34241210,
    -0.33934114,
    -0.33627018,
    -0.33319922,
    -0.33012826,
    -0.32705730,
    -0.32398634,
    -0.32091538,
    -0.31784442,
    -0.31477346,
    -0.31170250,
    -0.30863154,
    -0.30556058,
    -0.30248962,
    -0.29941865,
    -0.29634769,
    -0.29327673,
    -0.29020577,
    -0.28713481,
    -0.28406385,
    -0.28099289,
    -0.27792193,
    -0.27485097,
    -0.27178001,
    -0.26870905,
    -0.26563809,
    -0.26256713,
    -0.25949617,
    -0.25642521,
    -0.25335425,
    -0.25028329,
    -0.24721233,
    -0.24414136,
    -0.24107040,
    -0.23799944,
    -0.23492848,
    -0.23185752,
    -0.22878656,
    -0.22571560,
    -0.22264464,
    -0.21957368,
    -0.21650272,
    -0.21343176,
    -0.21036080,
    -0.20728984,
    -0.20421888,
    -0.20114792,
    -0.19807696,
    -0.19500600,
    -0.19193504,
    -0.18886407,
    -0.18579311,
    -0.18272215,
    -0.17965119,
    -0.17658023,
    -0.17350927,
    -0.17043831,
    -0.16736735,
    -0.16429639,
    -0.16122543,
    -0.15815447,
    -0.15508351,
    -0.15201255,
    -0.14894159,
    -0.14587063,
    -0.14279967,
    -0.13972871,
    -0.13665774,
    -0.13358678,
    -0.13051582,
    -0.12744486,
    -0.12437390,
    -0.12130294,
    -0.11823198,
    -0.11516102,
    -0.11209006,
    -0.10901910,
    -0.10594814,
    -0.10287718,
    -0.09980622,
    -0.09673526,
    -0.09366430,
    -0.09059334,
    -0.08752238,
    -0.08445142,
    -0.08138045,
    -0.07830949,
    -0.07523853,
    -0.07216757,
    -0.06909661,
    -0.06602565,
    -0.06295469,
    -0.05988373,
    -0.05681277,
    -0.05374181,
    -0.05067085,
    -0.04759989,
    -0.04452893,
    -0.04145797,
    -0.03838701,
    -0.03531605,
    -0.03224509,
    -0.02917413,
    -0.02610316,
    -0.02303220,
    -0.01996124,
    -0.01689028,
    -0.01381932,
    -0.01074836,
    -0.00767740,
    -0.00460644,
    -0.00153548,
    0.00153548,
    0.00460644,
    0.00767740,
    0.01074836,
    0.01381932,
    0.01689028,
    0.01996124,
    0.02303220,
    0.02610316,
    0.02917413,
    0.03224509,
    0.03531605,
    0.03838701,
    0.04145797,
    0.04452893,
    0.04759989,
    0.05067085,
    0.05374181,
    0.05681277,
    0.05988373,
    0.06295469,
    0.06602565,
    0.06909661,
    0.07216757,
    0.07523853,
    0.07830949,
    0.08138045,
    0.08445142,
    0.08752238,
    0.09059334,
    0.09366430,
    0.09673526,
    0.09980622,
    0.10287718,
    0.10594814,
    0.10901910,
    0.11209006,
    0.11516102,
    0.11823198,
    0.12130294,
    0.12437390,
    0.12744486,
    0.13051582,
    0.13358678,
    0.13665774,
    0.13972871,
    0.14279967,
    0.14587063,
    0.14894159,
    0.15201255,
    0.15508351,
    0.15815447,
    0.16122543,
    0.16429639,
    0.16736735,
    0.17043831,
    0.17350927,
    0.17658023,
    0.17965119,
    0.18272215,
    0.18579311,
    0.18886407,
    0.19193504,
    0.19500600,
    0.19807696,
    0.20114792,
    0.20421888,
    0.20728984,
    0.21036080,
    0.21343176,
    0.21650272,
    0.21957368,
    0.22264464,
    0.22571560,
    0.22878656,
    0.23185752,
    0.23492848,
    0.23799944,
    0.24107040,
    0.24414136,
    0.24721233,
    0.25028329,
    0.25335425,
    0.25642521,
    0.25949617,
    0.26256713,
    0.26563809,
    0.26870905,
    0.27178001,
    0.27485097,
    0.27792193,
    0.28099289,
    0.28406385,
    0.28713481,
    0.29020577,
    0.29327673,
    0.29634769,
    0.29941865,
    0.30248962,
    0.30556058,
    0.30863154,
    0.31170250,
    0.31477346,
    0.31784442,
    0.32091538,
    0.32398634,
    0.32705730,
    0.33012826,
    0.33319922,
    0.33627018,
    0.33934114,
    0.34241210,
    0.34548306,
    0.34855402,
    0.35162498,
    0.35469594,
    0.35776691,
    0.36083787,
    0.36390883,
    0.36697979,
    0.37005075,
    0.37312171,
    0.37619267,
    0.37926363,
    0.38233459,
    0.38540555,
    0.38847651,
    0.39154747,
    0.39461843,
    0.39768939,
    0.40076035,
    0.40383131,
    0.40690227,
    0.40997323,
    0.41304420,
    0.41611516,
    0.41918612,
    0.42225708,
    0.42532804,
    0.42839900,
    0.43146996,
    0.43454092,
    0.43761188,
    0.44068284,
    0.44375380,
    0.44682476,
    0.44989572,
    0.45296668,
    0.45603764,
    0.45910860,
    0.46217956,
    0.46525052,
    0.46832149,
    0.47139245,
    0.47446341,
    0.47753437,
    0.48060533,
    0.48367629,
    0.48674725,
    0.48981821,
    0.49288917,
    0.49596013,
    0.49903109,
    0.50210205,
    0.50517301,
    0.50824397,
    0.51131493,
    0.51438589,
    0.51745685,
    0.52052782,
    0.52359878,
    0.52666974,
    0.52974070,
    0.53281166,
    0.53588262,
    0.53895358,
    0.54202454,
    0.54509550,
    0.54816646,
    0.55123742,
    0.55430838,
    0.55737934,
    0.56045030,
    0.56352126,
    0.56659222,
    0.56966318,
    0.57273414,
    0.57580511,
    0.57887607,
    0.58194703,
    0.58501799,
    0.58808895,
    0.59115991,
    0.59423087,
    0.59730183,
    0.60037279,
    0.60344375,
    0.60651471,
    0.60958567,
    0.61265663,
    0.61572759,
    0.61879855,
    0.62186951,
    0.62494047,
    0.62801143,
    0.63108240,
    0.63415336,
    0.63722432,
    0.64029528,
    0.64336624,
    0.64643720,
    0.64950816,
    0.65257912,
    0.65565008,
    0.65872104,
    0.66179200,
    0.66486296,
    0.66793392,
    0.67100488,
    0.67407584,
    0.67714680,
    0.68021776,
    0.68328872,
    0.68635969,
    0.68943065,
    0.69250161,
    0.69557257,
    0.69864353,
    0.70171449,
    0.70478545,
    0.70785641,
    0.71092737,
    0.71399833,
    0.71706929,
    0.72014025,
    0.72321121,
    0.72628217,
    0.72935313,
    0.73242409,
    0.73549505,
    0.73856601,
    0.74163698,
    0.74470794,
    0.74777890,
    0.75084986,
    0.75392082,
    0.75699178,
    0.76006274,
    0.76313370,
    0.76620466,
    0.76927562,
    0.77234658,
    0.77541754,
    0.77848850,
    0.78155946,
    0.78463042,
    0.78770138,
    0.79077234,
    0.79384330,
    0.79691427,
    0.79998523,
    0.80305619,
    0.80612715,
    0.80919811,
    0.81226907,
    0.81534003,
    0.81841099,
    0.82148195,
    0.82455291,
    0.82762387,
    0.83069483,
    0.83376579,
    0.83683675,
    0.83990771,
    0.84297867,
    0.84604963,
    0.84912060,
    0.85219156,
    0.85526252,
    0.85833348,
    0.86140444,
    0.86447540,
    0.86754636,
    0.87061732,
    0.87368828,
    0.87675924,
    0.87983020,
    0.88290116,
    0.88597212,
    0.88904308,
    0.89211404,
    0.89518500,
    0.89825596,
    0.90132692,
    0.90439789,
    0.90746885,
    0.91053981,
    0.91361077,
    0.91668173,
    0.91975269,
    0.92282365,
    0.92589461,
    0.92896557,
    0.93203653,
    0.93510749,
    0.93817845,
    0.94124941,
    0.94432037,
    0.94739133,
    0.95046229,
    0.95353325,
    0.95660421,
    0.95967518,
    0.96274614,
    0.96581710,
    0.96888806,
    0.97195902,
    0.97502998,
    0.97810094,
    0.98117190,
    0.98424286,
    0.98731382,
    0.99038478,
    0.99345574,
    0.99652670,
    0.99959766,
    1.00266862,
    1.00573958,
    1.00881054,
    1.01188150,
    1.01495247,
    1.01802343,
    1.02109439,
    1.02416535,
    1.02723631,
    1.03030727,
    1.03337823,
    1.03644919,
    1.03952015,
    1.04259111,
    1.04566207,
    1.04873303,
    1.05180399,
    1.05487495,
    1.05794591,
    1.06101687,
    1.06408783,
    1.06715879,
    1.07022976,
    1.07330072,
    1.07637168,
    1.07944264,
    1.08251360,
    1.08558456,
    1.08865552,
    1.09172648,
    1.09479744,
    1.09786840,
    1.10093936,
    1.10401032,
    1.10708128,
    1.11015224,
    1.11322320,
    1.11629416,
    1.11936512,
    1.12243608,
    1.12550705,
    1.12857801,
    1.13164897,
    1.13471993,
    1.13779089,
    1.14086185,
    1.14393281,
    1.14700377,
    1.15007473,
    1.15314569,
    1.15621665,
    1.15928761,
    1.16235857,
    1.16542953,
    1.16850049,
    1.17157145,
    1.17464241,
    1.17771338,
    1.18078434,
    1.18385530,
    1.18692626,
    1.18999722,
    1.19306818,
    1.19613914,
    1.19921010,
    1.20228106,
    1.20535202,
    1.20842298,
    1.21149394,
    1.21456490,
    1.21763586,
    1.22070682,
    1.22377778,
    1.22684874,
    1.22991970,
    1.23299067,
    1.23606163,
    1.23913259,
    1.24220355,
    1.24527451,
    1.24834547,
    1.25141643,
    1.25448739,
    1.25755835,
    1.26062931,
    1.26370027,
    1.26677123,
    1.26984219,
    1.27291315,
    1.27598411,
    1.27905507,
    1.28212603,
    1.28519699,
    1.28826796,
    1.29133892,
    1.29440988,
    1.29748084,
    1.30055180,
    1.30362276,
    1.30669372,
    1.30976468,
    1.31283564,
    1.31590660,
    1.31897756,
    1.32204852,
    1.32511948,
    1.32819044,
    1.33126140,
    1.33433236,
    1.33740332,
    1.34047428,
    1.34354525,
    1.34661621,
    1.34968717,
    1.35275813,
    1.35582909,
    1.35890005,
    1.36197101,
    1.36504197,
    1.36811293,
    1.37118389,
    1.37425485,
    1.37732581,
    1.38039677,
    1.38346773,
    1.38653869,
    1.38960965,
    1.39268061,
    1.39575157,
    1.39882254,
    1.40189350,
    1.40496446,
    1.40803542,
    1.41110638,
    1.41417734,
    1.41724830,
    1.42031926,
    1.42339022,
    1.42646118,
    1.42953214,
    1.43260310,
    1.43567406,
    1.43874502,
    1.44181598,
    1.44488694,
    1.44795790,
    1.45102886,
    1.45409983,
    1.45717079,
    1.46024175,
    1.46331271,
    1.46638367,
    1.46945463,
    1.47252559,
    1.47559655,
    1.47866751,
    1.48173847,
    1.48480943,
    1.48788039,
    1.49095135,
    1.49402231,
    1.49709327,
    1.50016423,
    1.50323519,
    1.50630616,
    1.50937712,
    1.51244808,
    1.51551904,
    1.51859000,
    1.52166096,
    1.52473192,
    1.52780288,
    1.53087384,
    1.53394480,
    1.53701576,
    1.54008672,
    1.54315768,
    1.54622864,
    1.54929960,
    1.55237056,
    1.55544152,
    1.55851248,
    1.56158345,
    1.56465441,
    1.56772537,
    1.57079633
  )

  // Constants (fixed-point representation for CORDIC)
  val cosInit = (0.6072529350088812561694 * (1L << 32)).toLong  // Scaling factor for fixed-point
  val atanTable = Array(
    (0.78539816 * (1L << 32)).toLong,
    (0.46364761 * (1L << 32)).toLong,
    (0.24497866 * (1L << 32)).toLong,
    (0.12435499 * (1L << 32)).toLong,
    (0.06241881 * (1L << 32)).toLong,
    (0.03123983 * (1L << 32)).toLong,
    (0.01562373 * (1L << 32)).toLong,
    (0.00781234 * (1L << 32)).toLong,
    (0.00390623 * (1L << 32)).toLong,
    (0.00195312 * (1L << 32)).toLong,
    (0.00097656 * (1L << 32)).toLong,
    (0.00048828 * (1L << 32)).toLong,
    (0.00024414 * (1L << 32)).toLong,
    (0.00012207 * (1L << 32)).toLong,
    (0.00006104 * (1L << 32)).toLong,
    (0.00003052 * (1L << 32)).toLong,
    (0.00001526 * (1L << 32)).toLong,
    (0.00000763 * (1L << 32)).toLong,
    (0.00000381 * (1L << 32)).toLong,
    (0.00000191 * (1L << 32)).toLong,
    (0.00000095 * (1L << 32)).toLong,
    (0.00000048 * (1L << 32)).toLong,
    (0.00000024 * (1L << 32)).toLong
  )

  def sin_cordic(angle: UInt): UInt = {

    // Registers to store intermediate values (fixed-point arithmetic)
    val x = RegInit(cosInit.S(64.W))  // Cosine 
    val y = RegInit(0.S(64.W))        // Sine 
    val z = RegInit(angle.asSInt)     // Input 
    val factor = RegInit((1L << 32).S(64.W)) 

    // CORDIC computation loop
    for (i <- 0 until 23) {
      val temp_x = Wire(SInt(64.W))
      when(z >= 0.S) {
        // Positive rotation
        temp_x := x - ((y * factor) >> 32 ) 
        y := y + ((x * factor) >> 32)
        z := (z - atanTable(i).asSInt)
        printf(p"Positive Iteration $i: x = $x, y = $y, z = $z\n")
      } .otherwise {
        // Negative rotation
        temp_x := x + ((y * factor) >> 32 )
        y := y - ((x * factor) >> 32)
        z := (z + atanTable(i).asSInt)
        printf(p"Negative Iteration $i: x = $x, y = $y, z = $z\n")
      }
      x := temp_x
      factor := factor >> 1  // divide by 2
    }

    printf(p"Final sine value: y = $y\n")
    y.asUInt  
  }

  def sin_lut(angle: UInt): UInt = {
    val input_angle = angle.toString.toDouble
    val spacing = (M_PI / (table_size - 1.0))
    val i = (input_angle + M_PI_2) / spacing
    val j = i.toInt
    // x = m.y + c , m is slope
    val m = (input_angle - x_table(j))/(x_table(j+1) - x_table(j)) 
    val sine = sin_table(j) + ((sin_table(j+1) - sin_table(j)) * m)
    sine.toString.asUInt

  }

  // Call the sine function with the input angle
  val output = sin_cordic(value)
  // val output = sin_lut(value)
  // Simplified response interface
  val result = Mux(doRead, output , 0.U)

  when (doRead) {
    printf("Received an accum_read instruction with idx %d\n", value);
  }

  val doResp = cmd.bits.inst.xd
  val stallResp = doResp && !io.resp.ready

  cmd.ready := !stallResp

  // PROC Response Interface
  // Valid response if valid command, need a response, and no stalls
  io.resp.valid := cmd.valid && doResp
  // Must respond with the appropriate tag or undefined behavior
  io.resp.bits.rd := cmd.bits.inst.rd
  // THIS IS THE DATA THAT GETS SENT BACK TO THE USER
  io.resp.bits.data := result
    
  // Be busy when have pending memory requests or committed possibility of pending requests
  io.busy := cmd.valid
  // Set this true to trigger an interrupt on the processor (please refer to supervisor documentation)
  io.interrupt := false.B
}


class AccumulatorExample(opcodes: OpcodeSet, val n: Int = 4)(implicit p: Parameters) extends LazyRoCC(opcodes) {
  override lazy val module = new AccumulatorExampleModuleImp(this)
}

class AccumulatorExampleModuleImp(outer: AccumulatorExample) (implicit p: Parameters) extends LazyRoCCModuleImp(outer) with HasCoreParameters {
  // Mem(# of entries, size of an entry)
  // UInt(xLen.W) is an unsiged int with a width of xLen.W
  val regfile = Mem(outer.n, UInt(xLen.W))

  // Vector of four elements, each element is false.B
  val busy = RegInit(VecInit(Seq.fill(outer.n){false.B}))

  val cmd = Queue(io.cmd)
  val funct = cmd.bits.inst.funct

  // log2Up: compute the log2 of an integer, rounded up, with min value of 1
  // Useful for getting the number of bits needed to represent some number of states
  // log2Up(outer.n) - 1 = 1
  //
  // rs2(1, 0) pulls the least two significant bits from rs2 to act as an index into regfile 
  //
  val addr = cmd.bits.rs2(log2Up(outer.n)-1,0)
  val doWrite = funct === 0.U
  val doRead = funct === 1.U
  val doLoad = funct === 2.U
  val doAccum = funct === 3.U

  // 
  val memRespTag = io.mem.resp.bits.tag(log2Up(outer.n)-1,0)

  // datapath
  val addend = cmd.bits.rs1 // rs1 is the value (as opposed to an index)
  val accum = regfile(addr) // get current value stored in register file
  
  // Mux(condition, trueValue, falseValue)
  // If doWrite is true set wdata to value from rs1
  val wdata = Mux(doWrite, addend, accum + addend)

  // Update register file if instruction is to write or accumulate
  when (cmd.fire() && (doWrite || doAccum)) {
    regfile(addr) := wdata
  }

  when (io.mem.resp.valid) {
    regfile(memRespTag) := io.mem.resp.bits.data
    busy(memRespTag) := false.B
  }

  // control
  when (io.mem.req.fire()) {
    busy(addr) := true.B
  }

  val doResp = cmd.bits.inst.xd
  val stallReg = busy(addr)
  val stallLoad = doLoad && !io.mem.req.ready
  val stallResp = doResp && !io.resp.ready

  cmd.ready := !stallReg && !stallLoad && !stallResp
    // command resolved if no stalls AND not issuing a load that will need a request

  // PROC RESPONSE INTERFACE
  io.resp.valid := cmd.valid && doResp && !stallReg && !stallLoad
    // valid response if valid command, need a response, and no stalls
  io.resp.bits.rd := cmd.bits.inst.rd
    // Must respond with the appropriate tag or undefined behavior
  io.resp.bits.data := accum
    // Semantics is to always send out prior accumulator register value

  io.busy := cmd.valid || busy.reduce(_||_)
    // Be busy when have pending memory requests or committed possibility of pending requests
  io.interrupt := false.B
    // Set this true to trigger an interrupt on the processor (please refer to supervisor documentation)

  // MEMORY REQUEST INTERFACE
  io.mem.req.valid := cmd.valid && doLoad && !stallReg && !stallResp
  io.mem.req.bits.addr := addend
  io.mem.req.bits.tag := addr
  io.mem.req.bits.cmd := M_XRD // perform a load (M_XWR for stores)
  io.mem.req.bits.size := log2Ceil(8).U
  io.mem.req.bits.signed := false.B
  io.mem.req.bits.data := 0.U // we're not performing any stores...
  io.mem.req.bits.phys := false.B
  io.mem.req.bits.dprv := cmd.bits.status.dprv
}

class  TranslatorExample(opcodes: OpcodeSet)(implicit p: Parameters) extends LazyRoCC(opcodes, nPTWPorts = 1) {
  override lazy val module = new TranslatorExampleModuleImp(this)
}

class TranslatorExampleModuleImp(outer: TranslatorExample)(implicit p: Parameters) extends LazyRoCCModuleImp(outer) with HasCoreParameters {
  val req_addr = Reg(UInt(coreMaxAddrBits.W))
  val req_rd = Reg(chiselTypeOf(io.resp.bits.rd))
  val req_offset = req_addr(pgIdxBits - 1, 0)
  val req_vpn = req_addr(coreMaxAddrBits - 1, pgIdxBits)
  val pte = Reg(new PTE)

  val s_idle :: s_ptw_req :: s_ptw_resp :: s_resp :: Nil = Enum(4)
  val state = RegInit(s_idle)

  io.cmd.ready := (state === s_idle)

  when (io.cmd.fire()) {
    req_rd := io.cmd.bits.inst.rd
    req_addr := io.cmd.bits.rs1
    state := s_ptw_req
  }

  private val ptw = io.ptw(0)

  when (ptw.req.fire()) { state := s_ptw_resp }

  when (state === s_ptw_resp && ptw.resp.valid) {
    pte := ptw.resp.bits.pte
    state := s_resp
  }

  when (io.resp.fire()) { state := s_idle }

  ptw.req.valid := (state === s_ptw_req)
  ptw.req.bits.valid := true.B
  ptw.req.bits.bits.addr := req_vpn

  io.resp.valid := (state === s_resp)
  io.resp.bits.rd := req_rd
  io.resp.bits.data := Mux(pte.leaf(), Cat(pte.ppn, req_offset), -1.S(xLen.W).asUInt)

  io.busy := (state =/= s_idle)
  io.interrupt := false.B
  io.mem.req.valid := false.B
}

class  CharacterCountExample(opcodes: OpcodeSet)(implicit p: Parameters) extends LazyRoCC(opcodes) {
  override lazy val module = new CharacterCountExampleModuleImp(this)
  override val atlNode = TLClientNode(Seq(TLMasterPortParameters.v1(Seq(TLMasterParameters.v1("CharacterCountRoCC")))))
}

class CharacterCountExampleModuleImp(outer: CharacterCountExample)(implicit p: Parameters) extends LazyRoCCModuleImp(outer)
  with HasCoreParameters
  with HasL1CacheParameters {
  val cacheParams = tileParams.icache.get

  private val blockOffset = blockOffBits
  private val beatOffset = log2Up(cacheDataBits/8)

  val needle = Reg(UInt(8.W))
  val addr = Reg(UInt(coreMaxAddrBits.W))
  val count = Reg(UInt(xLen.W))
  val resp_rd = Reg(chiselTypeOf(io.resp.bits.rd))

  val addr_block = addr(coreMaxAddrBits - 1, blockOffset)
  val offset = addr(blockOffset - 1, 0)
  val next_addr = (addr_block + 1.U) << blockOffset.U

  val s_idle :: s_acq :: s_gnt :: s_check :: s_resp :: Nil = Enum(5)
  val state = RegInit(s_idle)

  val (tl_out, edgesOut) = outer.atlNode.out(0)
  val gnt = tl_out.d.bits
  val recv_data = Reg(UInt(cacheDataBits.W))
  val recv_beat = RegInit(0.U(log2Up(cacheDataBeats+1).W))

  val data_bytes = VecInit(Seq.tabulate(cacheDataBits/8) { i => recv_data(8 * (i + 1) - 1, 8 * i) })
  val zero_match = data_bytes.map(_ === 0.U)
  val needle_match = data_bytes.map(_ === needle)
  val first_zero = PriorityEncoder(zero_match)

  val chars_found = PopCount(needle_match.zipWithIndex.map {
    case (matches, i) =>
      val idx = Cat(recv_beat - 1.U, i.U(beatOffset.W))
      matches && idx >= offset && i.U <= first_zero
  })
  val zero_found = zero_match.reduce(_ || _)
  val finished = Reg(Bool())

  io.cmd.ready := (state === s_idle)
  io.resp.valid := (state === s_resp)
  io.resp.bits.rd := resp_rd
  io.resp.bits.data := count
  tl_out.a.valid := (state === s_acq)
  tl_out.a.bits := edgesOut.Get(
                       fromSource = 0.U,
                       toAddress = addr_block << blockOffset,
                       lgSize = lgCacheBlockBytes.U)._2
  tl_out.d.ready := (state === s_gnt)

  when (io.cmd.fire()) {
    addr := io.cmd.bits.rs1
    needle := io.cmd.bits.rs2
    resp_rd := io.cmd.bits.inst.rd
    count := 0.U
    finished := false.B
    state := s_acq
  }

  when (tl_out.a.fire()) { state := s_gnt }

  when (tl_out.d.fire()) {
    recv_beat := recv_beat + 1.U
    recv_data := gnt.data
    state := s_check
  }

  when (state === s_check) {
    when (!finished) {
      count := count + chars_found
    }
    when (zero_found) { finished := true.B }
    when (recv_beat === cacheDataBeats.U) {
      addr := next_addr
      state := Mux(zero_found || finished, s_resp, s_acq)
    } .otherwise {
      state := s_gnt
    }
  }

  when (io.resp.fire()) { state := s_idle }

  io.busy := (state =/= s_idle)
  io.interrupt := false.B
  io.mem.req.valid := false.B
  // Tie off unused channels
  tl_out.b.ready := true.B
  tl_out.c.valid := false.B
  tl_out.e.valid := false.B
}

class OpcodeSet(val opcodes: Seq[UInt]) {
  def |(set: OpcodeSet) =
    new OpcodeSet(this.opcodes ++ set.opcodes)

  def matches(oc: UInt) = opcodes.map(_ === oc).reduce(_ || _)
}

object OpcodeSet {
  def custom0 = new OpcodeSet(Seq("b0001011".U))
  def custom1 = new OpcodeSet(Seq("b0101011".U))
  def custom2 = new OpcodeSet(Seq("b1011011".U))
  def custom3 = new OpcodeSet(Seq("b1111011".U))
  def all = custom0 | custom1 | custom2 | custom3
}

class RoccCommandRouter(opcodes: Seq[OpcodeSet])(implicit p: Parameters)
    extends CoreModule()(p) {
  val io = new Bundle {
    val in = Flipped(Decoupled(new RoCCCommand))
    val out = Vec(opcodes.size, Decoupled(new RoCCCommand))
    val busy = Output(Bool())
  }

  val cmd = Queue(io.in)
  val cmdReadys = io.out.zip(opcodes).map { case (out, opcode) =>
    val me = opcode.matches(cmd.bits.inst.opcode)
    out.valid := cmd.valid && me
    out.bits := cmd.bits
    out.ready && me
  }
  cmd.ready := cmdReadys.reduce(_ || _)
  io.busy := cmd.valid

  assert(PopCount(cmdReadys) <= 1.U,
    "Custom opcode matched for more than one accelerator")
}
